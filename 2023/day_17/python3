2413432311323
3215453535623
3255245654254
3446585845452
4546657867536
1438598798454
4457876987766
3637877979653
4654967986887
4564679986453
1224686865563
2546548887735
4322674655533
from collections import deque

grid = [list(row) for row in open(0).read().strip().split("\n")]
height, width = len(grid), len(grid[0])

dirs = [(1, 0), (0, 1), (-1, 0), (0, -1)]
pq = []
heapq.heappush(pq, (0, 0, 0, 0, 0))

answer = float('inf')
while pq:
    cost, x, y, num_consecutive, dir = heapq.heappop(pq)
    if x == width - 1 and y == height - 1:
        answer = cost
        break

    left, right = (dir + 1) % 4, (dir + 3) % 4

    if num_consecutive < 3:
        dx, dy = dirs[dir]
        nx, ny = x + dx, y + dy
        if nx in range(width) and ny in range(height):
            heapq.heappush(pq, (cost + grid[ny][nx], nx, ny, num_consecutive + 1, dir))
    dx, dy = dirs[left]
    nx, ny = x + dx, y + dy
    if nx in range(width) and ny in range(height):
        heapq.heappush(pq, (cost + grid[ny][nx], nx, ny, 1, left))
    dx, dy = dirs[right]
    nx, ny = x + dx, y + dy
    if nx in range(width) and ny in range(height):
        heapq.heappush(pq, (cost + grid[ny][nx], nx, ny, 1, right))

print(answer)
